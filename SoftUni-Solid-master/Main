import Classes.*;
import Enums.ReportLevel;
import Interfaces.Appender;
import Interfaces.Layout;
import Interfaces.Logger;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader rd = new BufferedReader(new InputStreamReader(System.in));

        int n = Integer.parseInt(rd.readLine());
        int index = 0;

        Appender[] appenders = new Appender[n];

        while (n-- > 0) {
            String[] tokens = rd.readLine().split("\\s+");
            Appender appender = null;
            Layout layout = null;

            if (tokens[1].equals("SimpleLayout")) {
                layout = new SimpleLayout();
            } else {
                layout = new XmlLayout();
            }

            if (tokens[0].equals("ConsoleAppender")) {
                appender = new ConsoleAppender(layout);
            } else {
                appender = new FileAppender(layout);
            }

            if (tokens.length == 3) {
                appender.setReportLevel(ReportLevel.valueOf(tokens[2]));
            }

            appenders[index++] = appender;
        }

        Logger logger = new MessageLogger(appenders);

        String line = rd.readLine();

        while (!line.equals("END")) {
            String[] tokens = line.split("\\|");

            switch(ReportLevel.valueOf(tokens[0])){
                case INFO:
                    logger.logInfo(tokens[1], tokens[2]);
                break;
                case ERROR:
                    logger.logError(tokens[1], tokens[2]);
                break;
                case FATAL:
                    logger.logFatal(tokens[1], tokens[2]);
                break;
                case WARNING:
                    logger.logWarning(tokens[1], tokens[2]);
                break;
                case CRITICAL:
                    logger.logCritical(tokens[1], tokens[2]);
                break;

            }
            line = rd.readLine();
        }

        System.out.println(logger.toString());
    }
}
